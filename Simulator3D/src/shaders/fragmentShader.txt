#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D shadowMap;

uniform vec3 lightColor[4];
uniform vec3 attenuation[4];

uniform float hasColor;
uniform vec3 color;


void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	
	for(int i = 0; i < 4; i++){ 
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) +  (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attFactor ;
	}
	totalDiffuse = max(totalDiffuse, 0.2);

	if(hasColor < 0.5){
		out_Color = vec4(totalDiffuse, 1.0) * texture(textureSampler, pass_textureCoords);
	}else{
		out_Color = vec4(totalDiffuse, 1.0) * vec4(color, 1.0);
	}



	
}